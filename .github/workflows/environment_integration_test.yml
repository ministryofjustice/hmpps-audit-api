name: environment_integration_test.yml

on:
  workflow_call:
    inputs:
      env_test_url:
        required: true
        type: string
      job_name:
        required: true
        type: string
      environment:
        required: true
        type: string
      audit_event_type:
        required: true
        type: string

permissions:
  contents: read

jobs:
  run-integration-test:
    name: ${{ inputs.job_name }}
    environment: ${{ inputs.environment }}
    runs-on: [self-hosted, hmpps-github-actions-runner]
    env:
      OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
      OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
      OAUTH_TOKEN_URL: ${{ secrets.OAUTH_TOKEN_URL }}
      ENV_TEST_URL: ${{ inputs.env_test_url }}
      AUDIT_EVENT_TYPE: ${{ inputs.audit_event_type }}
    steps:
      - name: Get OAuth token
        id: get_token
        shell: bash
        run: |
          BASIC_AUTH=$(echo -n "$OAUTH_CLIENT_ID:$OAUTH_CLIENT_SECRET" | base64 | tr -d '\n')
          RESPONSE=$(curl --fail-with-body --verbose -s -X POST "$OAUTH_TOKEN_URL?grant_type=client_credentials" \
            -H "Content-Type: application/json" \
            -H "Authorization: Basic $BASIC_AUTH")
          TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Failed to extract access token."
            echo "Response was: $RESPONSE"
            exit 1
          fi
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Step 1 - Create audit event and register partition
        id: create_event
        run: |
          RESPONSE=$(curl --fail-with-body --verbose --show-error \
            -X POST "$ENV_TEST_URL/internal/integration-test/audit-event/$AUDIT_EVENT_TYPE" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
            -H "Content-Type: application/json")
          
          echo "Audit event response: $RESPONSE"
          echo "$RESPONSE" > audit_event.json
          sleep 5  # Sleep essential for partition to register before being able to query

      - name: Step 2 - Trigger audit event query
        id: trigger_audit_query
        run: |
          WHO=$(jq -r '.who' audit_event.json)
          echo "Using 'who' value for query: $WHO"

          RESPONSE=$(curl --fail-with-body --show-error --verbose \
            -X POST "$ENV_TEST_URL/internal/integration-test/query/$AUDIT_EVENT_TYPE/$WHO" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}")

          echo "Trigger audit query response: $RESPONSE"
          QUERY_EXECUTION_ID=$(echo "$RESPONSE" | jq -r '.queryExecutionId')
          echo "queryExecutionId=$QUERY_EXECUTION_ID" >> $GITHUB_OUTPUT

      - name: Step 3 - Wait for audit query results
        id: wait_audit_query
        run: |
          QUERY_ID=${{ steps.trigger_audit_query.outputs.queryExecutionId }}
          echo "Polling audit query status for ID: $QUERY_ID"
          
          for attempt in {1..36}; do
            RESPONSE=$(curl --fail-with-body --show-error \
              -X GET "$ENV_TEST_URL/audit/query/$QUERY_ID" \
              -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
              -H "Content-Type: application/json")
          
            echo "Attempt $attempt: $RESPONSE"
          
            QUERY_STATE=$(echo "$RESPONSE" | jq -r '.queryState')
          
            if [[ "$QUERY_STATE" == "SUCCEEDED" ]]; then
              echo "Audit query execution succeeded."
              echo "$RESPONSE" > audit_query_results.json
              break
            elif [[ "$QUERY_STATE" == "FAILED" || "$QUERY_STATE" == "CANCELLED" ]]; then
              echo "Audit query failed with state: $QUERY_STATE"
              exit 1
            fi
          
            echo "Audit query still in progress (state: $QUERY_STATE). Waiting 5 seconds..."
            sleep 5
          done
          
          if [[ "$QUERY_STATE" != "SUCCEEDED" ]]; then
            echo "Timed out waiting for audit query to succeed after 3 minutes."
            exit 1
          fi

      - name: Step 4 - Assert audit event exists
        run: |
          QUERY_ID=${{ steps.trigger_audit_query.outputs.queryExecutionId }}
          echo "Asserting audit event is present in the results for queryExecutionId: $QUERY_ID"
          RESPONSE=$(curl --fail-with-body --show-error --verbose \
            -X POST "$ENV_TEST_URL/internal/integration-test/assertion/$QUERY_ID" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
            -H "Content-Type: application/json" \
            --data @audit_event.json)
      
          echo "Assertion response: $RESPONSE"



